std::vector<std::tuple<glm::vec4, glm::vec4, glm::vec4>> near_clip_triangle(
    glm::vec4 vert1,
    glm::vec4 vert2,
    glm::vec4 vert3
) {
    return {{vert1, vert2, vert3}};
    // Clips this triangle agains the plane z = near
    // Returns a vector of resulting clipped triangles (only 1 or 2 triangles)

    std::vector<glm::vec4> verts_behind_near = {};
    std::vector<glm::vec4> verts_in_front_of_near = {};
    for (glm::vec4 vert: {vert1, vert2, vert3}) {
        if (vert.z < near) {
            verts_behind_near.push_back(vert);
        }
        else {
            verts_in_front_of_near.push_back(vert);
        }
    }

    glm::vec4 vert_1, vert_2, vert_3;

    if (verts_behind_near.size() == 0) {
        return {{vert1, vert2, vert3}};
    }
    else if (verts_behind_near.size() == 1) {
        vert_1 = verts_behind_near[0];
        vert_2 = verts_in_front_of_near[0];
        vert_3 = verts_in_front_of_near[1];
    }
    else {
        vert_1 = verts_in_front_of_near[0];
        vert_2 = verts_behind_near[0];
        vert_3 = verts_behind_near[1];
    }

    glm::vec4 intersect_1 = vert_1 + (near-vert_1.z)/(vert_2.z-vert_1.z) * (vert_2-vert_1);
    glm::vec4 intersect_2 = vert_1 + (near-vert_1.z)/(vert_3.z-vert_1.z) * (vert_3-vert_1);

    if (verts_behind_near.size() == 1) {
        return {{intersect_1, intersect_2, vert_2}, {vert_2, vert_3, intersect_2}};
    }
    else {
        return {{intersect_1, intersect_2, vert_1}};
    }
}