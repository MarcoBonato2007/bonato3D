bool is_line_visible(glm::vec4 start, glm::vec4 end) {
    glm::vec4 line_seg = end-start;

    std::pair<float, float> lower_fractions[3] = {
        {-start.z*tan_half_x_fov-start.x, line_seg.x+line_seg.z*tan_half_x_fov},
        {-start.z*tan_half_y_fov-start.y, line_seg.y+line_seg.z*tan_half_y_fov}, 
        {near-start.z, line_seg.z}
    };

    std::pair<float, float> upper_fractions[3] = {
        {start.z*tan_half_x_fov-start.x, line_seg.x-line_seg.z*tan_half_x_fov},
        {start.z*tan_half_y_fov-start.y, line_seg.y-line_seg.z*tan_half_y_fov},
        {far-start.z, line_seg.z}
    };

    float lower_bound = -INFINITY;
    float upper_bound = INFINITY;

    for (std::pair<float, float> fraction: lower_fractions) {
        if (fraction.second > 0) {
            lower_bound = std::max(lower_bound, fraction.first/fraction.second);
        }
        else if (fraction.second < 0) {
            upper_bound = std::min(upper_bound, fraction.first/fraction.second);
        }
        else if (fraction.first > 0) {return false;}
    }

    for (std::pair<float, float> fraction: upper_fractions) {
        if (fraction.second > 0) {
            upper_bound = std::min(upper_bound, fraction.first/fraction.second);
        }
        else if (fraction.second < 0) {
            lower_bound = std::max(lower_bound, fraction.first/fraction.second);
        }
        else if (fraction.first < 0) {return false;}
    }
    
    return (lower_bound <= 1 and upper_bound >= 0);
}

bool is_triangle_in_frustum(glm::vec4 vert1, glm::vec4 vert2, glm::vec4 vert3) {
    std::pair<glm::vec4, glm::vec4> lines[3] = {{vert1, vert2}, {vert1, vert3}, {vert2, vert3}};

    bool flag = false;
    for (auto points: lines) {
        if (is_line_visible(points.first, points.second)) {
            flag = true;
        }
    }

    return flag;
}